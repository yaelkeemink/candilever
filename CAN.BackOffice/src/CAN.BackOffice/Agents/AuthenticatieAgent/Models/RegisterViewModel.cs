// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace CAN.BackOffice.Agents.AuthenticatieAgents.Agents.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class RegisterViewModel
    {
        /// <summary>
        /// Initializes a new instance of the RegisterViewModel class.
        /// </summary>
        public RegisterViewModel() { }

        /// <summary>
        /// Initializes a new instance of the RegisterViewModel class.
        /// </summary>
        public RegisterViewModel(string userName, string password, string confirmPassword = default(string), string role = default(string))
        {
            UserName = userName;
            Password = password;
            ConfirmPassword = confirmPassword;
            Role = role;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userName")]
        public string UserName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public string Password { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "confirmPassword")]
        public string ConfirmPassword { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "role")]
        public string Role { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (UserName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UserName");
            }
            if (Password == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Password");
            }
            if (this.Password != null)
            {
                if (this.Password.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Password", 100);
                }
                if (this.Password.Length < 6)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Password", 6);
                }
            }
        }
    }
}
